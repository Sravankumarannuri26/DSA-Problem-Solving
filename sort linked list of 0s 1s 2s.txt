///brute




public class Solution
{
    public static Node sortList(Node head) {
        int cnt0=0,cnt1=0,cnt2=0;
        Node temp=head;
        while(temp!=null){
            if(temp.data==0) cnt0++;
            else if(temp.data==1) cnt1++;
            else  cnt2++;
            temp=temp.next;
        }
        temp=head;
        while(temp!=null){
            if(cnt0!=0){
                temp.data=0;
                cnt0--;
            }
            else if(cnt1!=0){
                temp.data=1;
                cnt1--;
            }
            else if(cnt2!=0){
                temp.data=2;
                cnt2--;
            }
            temp=temp.next;
        }
        return head;
    }
}



//optimal



public class Solution {
    public static Node sortList(Node head) {
        Node zeroHead = new Node(-1);
        Node oneHead = new Node(-1);
        Node twoHead = new Node(-1);
        Node zero = zeroHead;
        Node one = oneHead;
        Node two = twoHead;
        Node temp = head;

        while (temp != null) {
            if (temp.data == 0) {
                zero.next = temp;
                zero = zero.next;
            } else if (temp.data == 1) {
                one.next = temp;
                one = one.next;
            } else {
                two.next = temp;
                two = two.next;
            }
            temp = temp.next;
        }

        // Connect the three lists
        zero.next = oneHead.next;
        one.next = twoHead.next;

        // Set the last pointers to null to avoid cycles
        two.next = null;

        return zeroHead.next; // Return the new head
    }
}

