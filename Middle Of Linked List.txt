 Middle Of Linked List


public class Solution
{
    public static Node findMiddle(Node head)
    {
        if(head==null){
        return null;
        }
        Node temp=head;
        int cnt=0;
        while(temp !=null){
            cnt++;
            temp=temp.next;
        }
        int midNode=(cnt/2)+1;
        temp=head;
        while(temp!=null){
            midNode=midNode-1;
            if(midNode==0){
                break;
            }
            temp=temp.next;
        }
        return temp;
    }
}


OPTIMAL: Tortoise and Hare method


public class Solution
{
    public static Node findMiddle(Node head)
    {
        if(head==null){
        return null;
        }

        Node slow=head;
        Node fast=head;
        while(fast !=null && fast.next !=null){
            slow=slow.next;
            fast=fast.next.next;

        }
        return slow;
        
    }
}