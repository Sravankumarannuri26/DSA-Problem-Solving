//brute


public class Solution {

    public static boolean ls(int a[], int num) {
        for (int i = 0; i < a.length; i++) {
            if (a[i] == num) {
                return true;
            }
        }
        return false;
    }

    public static int longestSuccessiveElements(int[] a) {
        int n = a.length;
        int longest = 1;

        for (int i = 0; i < n; i++) {
            int count = 1; // Initialize count for each new element
            int x = a[i];

            while (ls(a, x + 1)) {
                x = x + 1;
                count = count + 1;
            }

            if (count > longest) {
                longest = count;
            }
        }

        return longest;
    }
}



//better



import java.util.*;
public class Solution {

  

    public static int longestSuccessiveElements(int[] a) {
        Arrays.sort(a);
        int n=a.length;
        int lastSmaller=Integer.MIN_VALUE;
        int count=0;
        int longest=1;
        for(int i=0;i<n;i++){
            if(a[i]-1==lastSmaller){
                count=count+1;
                lastSmaller=a[i];
            }
            else if(a[i] != lastSmaller){
                count=1;
                lastSmaller=a[i];
            }
            longest=Math.max(count,longest);
        }
        return longest;

}
}




//optimal



import java.util.*;
public class Solution {

  

    public static int longestSuccessiveElements(int[] a) {
        int n = a.length;
        if (n == 0)
            return 0;

        int longest = 1;
        Set<Integer> set = new HashSet<>();

        for (int i = 0; i < n; i++) {
            set.add(a[i]);
        }

         // Find the longest sequence
        for (int it : set) {
            // if 'it' is a starting number
            if (!set.contains(it - 1)) {
                // find consecutive numbers
                int cnt = 1;
                int x = it;
                while (set.contains(x + 1)) {
                    x = x + 1;
                    cnt = cnt + 1;
                }
                longest = Math.max(longest, cnt);
            }
        }
        return longest;
    }
}

