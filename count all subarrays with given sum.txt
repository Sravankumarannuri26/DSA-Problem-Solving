
//brute


import java.util.*;

public class Solution {
    public static int findAllSubarraysWithGivenSum(int arr[], int s) {
        int count = 0;
        int n = arr.length;

        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += arr[j];
                if (sum == s) {
                    count++;
                }
            }
        }
        return count;
    }
}


//optimal


import java.util.* ;
import java.io.*; 
public class Solution {
    public static int findAllSubarraysWithGivenSum(int arr[], int s) {
        int n = arr.length;
        int count = 0;
        int sum = 0;
        Map<Integer, Integer> prefixSumCount = new HashMap<>();
        prefixSumCount.put(0, 1);

        for (int i = 0; i < n; i++) {
            sum += arr[i];

            // Check if there is a prefix sum (sum - k) that equals k
            if (prefixSumCount.containsKey(sum - s)) {
                count += prefixSumCount.get(sum - s);
            }

            // Update the prefix sum count
            prefixSumCount.put(sum, prefixSumCount.getOrDefault(sum, 0) + 1);
        }

        return count;
    }    
    
}