//brute

class Solution {
    // Function to find the length of a loop in the linked list.
    public int countNodesinLoop(Node head) {
        if(head==null) return 0;
        HashMap<Node,Integer> map=new HashMap<>();
        Node temp=head;
        int timer=0;
        while(temp !=null){
            if(map.containsKey(temp)){
                int value=map.get(temp);
                return timer-value;
            }
            map.put(temp,timer);
            timer++;
            temp=temp.next;
        }
        return 0; 
    }
}


//optimal


class Solution {
    
    private static int findLength(Node slow, Node fast){
        int cnt = 1;
        fast = fast.next;
        while(slow != fast){
            cnt++;
            fast = fast.next;
        }
        return cnt;
    }
    
    // Function to find the length of a loop in the linked list.
    public int countNodesinLoop(Node head) {
        if(head == null) return 0;
        Node slow = head, fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) return findLength(slow, fast);
        }
        return 0; // return 0 if no loop is found
    }
}