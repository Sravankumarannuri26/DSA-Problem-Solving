///brute



public class Solution {
    public static double median(int[] a, int[] b) {
        
        int n1 = a.length;
        int n2 = b.length;
        int c[] = new int[n1 + n2];
        int i = 0, j = 0, k = 0;

        while (i < n1 && j < n2) {
            if (a[i] < b[j]) {
                c[k++] = a[i++];
            } else {
                c[k++] = b[j++];
            }
        }

        while (i < n1) {
            c[k++] = a[i++];
        }

        while (j < n2) {
            c[k++] = b[j++];
        }

        int n = n1 + n2;
        if (n % 2 == 0) {
            return (c[n / 2] + c[n / 2 - 1]) / 2.0;
        } else {
            return c[n / 2];
        }
    }
}



//optimal




public class Solution {
    public static double median(int[] a, int[] b) {
        
        int n1 = a.length;
        int n2 = b.length;
        int n = n1 + n2;
        int i = 0, j = 0;
        int index1 = n / 2 - 1;
        int index2 = n / 2;
        int cnt = 0;
        int index1Element = -1, index2Element = -1;

        while (i < n1 && j < n2) {
            if (a[i] < b[j]) {
                if (cnt == index1) index1Element = a[i];
                if (cnt == index2) index2Element = a[i];
                cnt++;
                i++;
            } else {
                if (cnt == index1) index1Element = b[j];
                if (cnt == index2) index2Element = b[j];
                cnt++;
                j++;
            }
        }

        while (i < n1) {
            if (cnt == index1) index1Element = a[i];
            if (cnt == index2) index2Element = a[i];
            cnt++;
            i++;
        }

        while (j < n2) {
            if (cnt == index1) index1Element = b[j];
            if (cnt == index2) index2Element = b[j];
            cnt++;
            j++;
        }

        if (n % 2 == 0) {
            return (index1Element + index2Element) / 2.0;
        } else {
            return index2Element;
        }
    }
}

//optimal







class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        if (n1 > n2) return findMedianSortedArrays(nums2, nums1);
        int low = 0, high = n1;
        int left = (n1 + n2 + 1) / 2;
        while (low <= high) {
            int mid1 = low + (high - low) / 2;
            int mid2 = left - mid1;
            int l1 = Integer.MIN_VALUE, l2 = Integer.MIN_VALUE;
            int r1 = Integer.MAX_VALUE, r2 = Integer.MAX_VALUE;
            if (mid1 < n1) r1 = nums1[mid1];
            if (mid2 < n2) r2 = nums2[mid2];
            if (mid1 - 1 >= 0) l1 = nums1[mid1 - 1];
            if (mid2 - 1 >= 0) l2 = nums2[mid2 - 1];
            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 0) {
                    return (Math.max(l1, l2) +  Math.min(r1, r2)) / 2.0;
                }
                return Math.max(l1, l2);
            } else if (l1 > r2) {
                high = mid1 - 1;
            } else {
                low = mid1 + 1;
            }
        }
        return 0;
    }

        
    
}