import java.util.Scanner;

public class pascal1 {
    public static long ncr(int n, int r) {
        if (r == 0 || r == n) {
            return 1;
        } else {
            long result = 1;
            for (int i = 0; i < r; i++) {
                result = result * (n - i);
                result = result / (i + 1);
            }
            return result;
        }
    }

    public static void main(String args[]) {
        System.out.println("Enter the row number for Pascal's Triangle:");
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int r = 1; r <= n; r++) {
            System.out.print(ncr(n-1, r-1) + " ");
        }
    }
}




//leetcode




class Solution {
    public static int nCr(int n, int r) {
        long res = 1;
        // calculating nCr:
        for (int i = 0; i < r; i++) {
            res = res * (n - i);
            res = res / (i + 1);
        }
        return (int) res;
    }
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();
        int n=numRows;
        // Store the entire Pascal's triangle:
        for (int row = 1; row <= n; row++) {
            List<Integer> tempLst = new ArrayList<>(); // temporary list
            for (int col = 1; col <= row; col++) {
                tempLst.add(nCr(row - 1, col - 1));
            }
            ans.add(tempLst);
        }
        return ans;
    
    }
}