import java.util.ArrayList;

public class Solution {

    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        int first = -1, last = -1;
        int ans[] = new int[2];
        for (int i = 0; i < n; i++) {
            if (arr.get(i) == k) {
                if (first == -1) {
                    first = i;
                }
                last = i;
            }
        }
        ans[0] = first;
        ans[1] = last;

        return ans;
    }
}


/solution 2




import java.util.ArrayList;

public class Solution {

    public static int upperBound(ArrayList<Integer> arr, int n, int x) {
        int low = 0, high = n - 1;
        int ans = n;

        while (low <= high) {
            int mid = (low + high) / 2;
            // maybe an answer
            if (arr.get(mid) > x) {
                ans = mid;
                // look for a smaller index on the left
                high = mid - 1;
            } else {
                low = mid + 1; // look on the right
            }
        }
        return ans;
    }

    public static int lowerBound(ArrayList<Integer> arr, int n, int x) {
        int low = 0, high = n - 1;
        int ans = n;

        while (low <= high) {
            int mid = (low + high) / 2;
            // maybe an answer
            if (arr.get(mid) >= x) {
                ans = mid;
                // look for a smaller index on the left
                high = mid - 1;
            } else {
                low = mid + 1; // look on the right
            }
        }
        return ans;
    }

    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        int lb = lowerBound(arr, n, k);
        if (lb == n || arr.get(lb) != k) return new int[]{-1, -1};
        int ub = upperBound(arr, n, k);
        return new int[]{lb, ub - 1};
    }
}




//solution 3




import java.util.ArrayList;

public class Solution {
public static int first(ArrayList<Integer> arr,int n,int k){
       int low=0,high=n-1,mid;
       int first=-1;
       while(low<=high){
           mid=low+(high-low)/2;
           if(arr.get(mid)==k){
               first=mid;
               high=mid-1;
           }
           else if(arr.get(mid)<k){
               low=mid+1;
           }
           else high=mid-1;
       }
       return first;
   }

   public static int last(ArrayList<Integer> arr,int n,int k){
       int low=0,high=n-1,mid;
       int last=-1;
       while(low<=high){
           mid=low+(high-low)/2;
           if(arr.get(mid)==k){
               last=mid;
               low=mid+1;
           }
           else if(arr.get(mid)>k){
               high=mid-1;
           }
           else low=mid+1;
       }
       return last;
   }
    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        // Write your code here.
        int ft=first(arr, n, k);
        if(ft==-1) return new int[]{-1,-1};
        int lt=last(arr, n, k);
        return new int[]{ft,lt};
    }

}
