//brute





import java.util.ArrayList;

public class Solution {
    public static int kthElement(ArrayList<Integer> a, ArrayList<Integer> b, int n1, int n2, int k) {
        int p1 = 0, p2 = 0, counter = 0, answer = 0;

        while (p1 < n1 && p2 < n2) {
            if (counter == k) break;
            else if (a.get(p1) < b.get(p2)) {
                answer = a.get(p1);
                ++p1;
            } else {
                answer = b.get(p2);
                ++p2;
            }
            ++counter;
        }

        if (counter != k) {
            if (p1 < n1)
                answer = a.get(p1 + k - counter);
            else
                answer = b.get(p2 + k - counter);
        }

        return answer;
    }
}



//optimal



import java.util.ArrayList;

public class Solution {
    public static int kthElement(ArrayList<Integer> a, ArrayList<Integer> b, int n1, int n2, int k) {
        if (n1 > n2) {
            return kthElement(b, a, n2, n1, k); // Swap n1 and n2
        }

        int low = Math.max(k-n2,0), high = Math.min(k, n1);
        int left = k;

        while (low <= high) {
            int mid1 = low + (high - low) / 2;
            int mid2 = left - mid1;

            int l1 = (mid1 > 0) ? a.get(mid1 - 1) : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? b.get(mid2 - 1) : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? a.get(mid1) : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? b.get(mid2) : Integer.MAX_VALUE;

            if (l1 <= r2 && l2 <= r1) {
                return Math.max(l1, l2);
            } else if (l1 > r2) {
                high = mid1 - 1;
            } else {
                low = mid1 + 1;
            }
        }

        // Check if elements are remaining in the longer array
        if (low <= n1) {
            return a.get(low + k - (low + high) / 2 - 1);
        }

        return 0;
    }
}
