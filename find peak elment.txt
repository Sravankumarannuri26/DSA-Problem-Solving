///brute



import java.util.ArrayList;
public class Solution {
    public static int findPeakElement(ArrayList<Integer> arr) {
        int n=arr.size();
        for(int i=0;i<n;i++){
            if((i==0 || arr.get(i-1)<arr.get(i)) && (i==n-1 || arr.get(i)>arr.get(i+1))){
                return i;
            }
        }
        return -1;
    }
}




///assuming having only single peak



import java.util.ArrayList;

public class Solution {
    public static int findPeakElement(ArrayList<Integer> arr) {
        int n = arr.size();
        if (n == 1) return 0;
        if (arr.get(0) > arr.get(1)) return 0;
        if (arr.get(n - 1) > arr.get(n - 2)) return n - 1;
        int low = 1, high = n - 2, mid;
        while (low <= high) {
            mid = low + (high - low) / 2;
            if (arr.get(mid) > arr.get(mid - 1) && arr.get(mid) > arr.get(mid + 1)) {
                return mid;
            } else if (arr.get(mid) > arr.get(mid - 1)) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }
}
