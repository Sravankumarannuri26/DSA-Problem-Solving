///brute



import java.util.ArrayList;
public class Solution
{
    public static int singleNonDuplicate(ArrayList<Integer> arr)
    {
       int n=arr.size();
       if(n==1) return arr.get(0);
       for(int i=0;i<n;i++){
           ///for starting element
           if(i==0){
               if(arr.get(i+1)!=arr.get(i)) return arr.get(i);
           }
           //for last element
           else if(i==n-1){
               if(arr.get(i)!=arr.get(i-1)){
                   return arr.get(i);
               }
           }
           //for middle elements
           else{
               if(arr.get(i)!=arr.get(i+1) && arr.get(i)!=arr.get(i-1)){
                   return arr.get(i);
               }
           }
       }
       return -1;
    }
}



///optimal



import java.util.ArrayList;
public class Solution
{
    public static int singleDuplicate(ArrayList<Integer> arr) {
        int n = arr.size();
        if (n == 1)
            return arr.get(0);
        if (!arr.get(0).equals(arr.get(1)))
            return arr.get(0);
        if (!arr.get(n - 1).equals(arr.get(n - 2)))
            return arr.get(n - 1);
        int low = 1, high = n - 1, mid;
        while (low <= high) {
            mid = low + (high - low) / 2;
            if (!arr.get(mid).equals(arr.get(mid + 1)) && !arr.get(mid).equals(arr.get(mid - 1))) {
                return arr.get(mid);
            }
            // we are in the left
            else if (mid % 2 == 1 && arr.get(mid).equals(arr.get(mid - 1))
                    || mid % 2 == 0 && arr.get(mid).equals(arr.get(mid + 1))) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }
    public static int singleNonDuplicate(ArrayList<Integer> arr)
    {
        
        return singleDuplicate(arr);
    
    }
}
