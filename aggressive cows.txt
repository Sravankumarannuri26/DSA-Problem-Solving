///optimal


import java.util.*;
public class Solution {
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
        int n = stalls.length; //size of array
        int cntCows = 1; //no. of cows placed
        int last = stalls[0]; //position of last placed cow.
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++; //place next cow.
                last = stalls[i]; //update the last location.
            }
            if (cntCows >= cows) return true;
        }
        return false;
    }
    public static int aggressiveCows(int []stalls, int k) {
        //    Write your code here.
        int n = stalls.length; //size of array
        //sort the stalls[]:
        Arrays.sort(stalls);

        int low = 1, high = stalls[n - 1] - stalls[0];
        //apply binary search:
        while (low <= high) {
            int mid = (low + high) / 2;
            if (canWePlace(stalls, mid, k) == true) {
                low = mid + 1;
            } else high = mid - 1;
        }
        return high;
    
    }
}




///brute



import java.util.*;

public class Solution {
    public static boolean canWePlace(int arr[], int dist, int cows) {
        int cntCows = 1, last = arr[0], n = arr.length;

        for (int i = 1; i < n; i++) {
            if (arr[i] - last >= dist) {
                cntCows++;
                last = arr[i];
            }
        }
        return cntCows >= cows;
    }

    public static int aggressiveCows(int[] stalls, int k) {
        Arrays.sort(stalls);
        int maxi = Integer.MIN_VALUE, mini = Integer.MAX_VALUE, n = stalls.length;
        for (int i = 0; i < n; i++) {
            mini = Math.min(mini, stalls[i]);
            maxi = Math.max(maxi, stalls[i]);
        }

        for (int i = (maxi - mini); i >= 1; i--) {
            if (canWePlace(stalls, i, k)) {
                return i;
            }
        }
        return -1;
    }

    
}