//brute


class Solution {
    public static int findDays(int arr[],int cap){
        int days=1,load=0;
        for(int i=0;i<arr.length;i++){
        if(load+arr[i]>cap){
            days=days+1;
            load=arr[i];
        }
        else{
            load+=arr[i];
        }
    }
        return days;

    }
    public int shipWithinDays(int[] weights, int days) {
        int maxi=Integer.MIN_VALUE,sumOfWeights=0;
        for(int i=0;i<weights.length;i++){
            sumOfWeights=sumOfWeights+weights[i];
            maxi=Math.max(maxi,weights[i]);
        }
        for(int i=maxi;i<=sumOfWeights;i++){
            if(findDays(weights,i)<=days){
                return i;
            }
        }
        return -1;
        
    }
}



///optimal




import java.util.*;
import java.io.*;

public class Solution {

     public static int binarySearch(int weights[], int days, int low, int high) {
        int mid;
        while (low <= high) {
            mid = low + (high - low) / 2;
            if (findDays(weights, mid) <= days) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    public static int findDays(int[] weights, int cap) {
        int days = 1;
        int load = 0;
        int n = weights.length;
        for (int i = 0; i < n; i++) {
            if (load + weights[i] > cap) {
                days += 1;
                load = weights[i];
            } else {
                load += weights[i];
            }
        }
        return days;
    }

    public static int leastWeightCapacity(int[] weights, int d) {
        int maxi = Integer.MIN_VALUE, sum = 0;
        for (int i = 0; i < weights.length; i++) {
            sum += weights[i];
            maxi = Math.max(maxi, weights[i]);
        }
        return binarySearch(weights, d, maxi, sum);
    }

   
}
